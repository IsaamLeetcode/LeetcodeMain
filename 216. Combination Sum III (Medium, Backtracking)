Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.

class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:

        #Create a function to help us backtrack. Pass in the number from which we start forming new combinations,
        #the combination that has been built up so far, and the sum of the current combination:
        def backtrack(start, currentCombination, currentSum):

            #Base Case: If the combination has k numbers that sum up to n, we add it to our answer:
            if len(currentCombination) == k and currentSum == n:
                answer.append(list(currentCombination))
                return
            
            #If either the combination has more then k numbers or the sum is greater then, we stop:
            if len(currentCombination) > k or currentSum > n:
                return
            
            #Explore the numbers from the current start to 9:
            for i in range(start, 10):

                #Add the new number into the current combination:
                currentCombination.append(i)

                #Recursive call to try the newly made combination:
                backtrack(i + 1, currentCombination, currentSum + i)

                #Remove the current element from the combination:
                currentCombination.pop()

        answer = []
        backtrack(1, [], 0)
        return answer

        
