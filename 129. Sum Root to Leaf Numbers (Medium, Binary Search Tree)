You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        
        #Helper function to use the recursive Depth-First-Search. It takes two parameters, the node 
        #currently being used, which start at the root, then moves on to the left then right subtrees,
        #and the current number generated by traversing through the current subtree.
        def dfs(node, currentNumber):

            #Base Case: There are no nodes in the tree, return a sum of 0:
            if not node:
                return 0
            
            #Form the current number by shifitng the digits to the left, to ensure that the new
            #values of each new added node is in its proper place, then add on the actual value of the node:
            currentNumber = currentNumber * 10 + node.val

            #If we are at a leaf node, meaning at the end of a subtree, return the currentNumber:
            if not node.right and not node.left:
                return currentNumber
            
            #If we are not at a leaf, we have more nodes to go through in the current subtree,
            #so we recursively call this helper function to continue summing up the root-to-leaf
            #paths:

            leftSum = dfs(node.left, currentNumber)
            rightSum = dfs(node.right, currentNumber)

            #Return the total sum:
            return leftSum + rightSum
        
        #Recursive call to the helper function to start the search.
        return dfs(root, 0)
