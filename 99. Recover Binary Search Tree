You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
Example 2:


Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.



class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        #Initialize variables to keep track of the swapped and previous node:
        self.first = None
        self.second = None

        #Initialize the previous node to a very small value:
        self.previous = TreeNode(float('-inf'))

        #Helper function to perform in-order traversal:
        def inOrderTraversal(node: TreeNode):
            if not node:
                return

            #Traverse the left subtree:
            inOrderTraversal(node.left)

            #Detect the two nodes that are out of order:
            if self.previous.val > node.val:

                if not self.first:

                    # First violation
                    self.first = self.previous

                #Second violation or repeated violation:
                self.second = node

            #Update previous node:
            self.previous = node

            #Traverse the right subtree:
            inOrderTraversal(node.right)

        #Perform the in-order traversal to detect the swapped nodes:
        inOrderTraversal(root)

        #Swap the values of the two nodes to fix the BST:
        if self.first and self.second:
            self.first.val, self.second.val = self.second.val, self.first.val
