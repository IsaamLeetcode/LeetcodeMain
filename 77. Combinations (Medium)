Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.

class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:

        #Make a helper function to help backtrack. Start represents the current starting number, and the
        #current combination is the list that has been built up so far:
        def backtrack(start, currentCombination):

            #This is our base case, if the length of the current combination is equal to k, we can
            #add it to our answer. We use the colon to create a copy, to make sure that previously added
            #combinations are not modified when adding the latest combination to the answer:
            if len(currentCombination) == k:
                answer.append(currentCombination[:])
                return
            
            #Loop from the current start to the end of the given initial range (n):
            for i in range(start, n + 1):

                #Add the number i to the current combination:
                currentCombination.append(i)

                #Move to the next number (i+1) and continue building the combination:
                backtrack(i + 1, currentCombination)

                #Backtrack: remove the last number and try the next possibility:
                currentCombination.pop()

        #Initialise the list of answer, make the call to the backtracking function, and return the answer.
        answer = []
        backtrack(1, [])
        return answer
