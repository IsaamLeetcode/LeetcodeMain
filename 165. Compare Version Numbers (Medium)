Given two version strings, version1 and version2, compare them. A version string consists of revisions separated by dots '.'. The value of the revision is its integer conversion ignoring leading zeros.

To compare version strings, compare their revision values in left-to-right order. If one of the version strings has fewer revisions, treat the missing revision values as 0.

Return the following:

If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.
 

Example 1:

Input: version1 = "1.2", version2 = "1.10"

Output: -1

Explanation:

version1's second revision is "2" and version2's second revision is "10": 2 < 10, so version1 < version2.

Example 2:

Input: version1 = "1.01", version2 = "1.001"

Output: 0

Explanation:

Ignoring leading zeroes, both "01" and "001" represent the same integer "1".

class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:

        #Split both versions using the dots as limiters:
        seperatedVersion1 = version1.split('.')
        seperatedVersion2 = version2.split('.')

        #Find which version is the longest, and store that length.
        maxLength = max(len(seperatedVersion1), len(seperatedVersion2))

        #Iterate over the previously aquired maximum length:
        for i in range(maxLength):

            #Convert the current revision into a integer. Note that the second if-statement is there to 
            #handle cases where the two versions have different lengths, as we will always iterate over
            #the length of the longer one. If the check does not exist, and one version is shorter then 
            #another, we will end up trying to work with a revision that does not exist.
            revision1 = int(seperatedVersion1[i]) if i < len(seperatedVersion1) else 0
            revision2 = int(seperatedVersion2[i]) if i < len(seperatedVersion2) else 0

            #Compare the lengths of each revision, and returnt the appropriate value.
            if revision1 < revision2:
                return -1
            elif revision1 > revision2:
                return 1
        
        #If we reach this point, we failed to find any differences in the revisions, and
        #the versions are identical:
        return 0
